name: Daily RUNTS Monitoring

on:
  schedule:
    - cron: '0 8 * * *'  # Esegui ogni giorno alle 8:00 UTC
  workflow_dispatch:  # Consente l'esecuzione manuale

jobs:
  check-runts:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run monitoring script
      run: python runts_monitor.py

    - name: Check for notifications
      id: check_notifications
      run: |
        if [ -z "$(ls -A data/notification_*.json 2>/dev/null)" ]; then
          echo "No notifications found"
          echo "has_notifications=false" >> $GITHUB_OUTPUT
        else
          echo "Notifications found"
          echo "has_notifications=true" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Issue for changes
      if: steps.check_notifications.outputs.has_notifications == 'true'
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Trova i file di notifica
          const notificationDir = path.join(process.env.GITHUB_WORKSPACE, 'data');
          const files = fs.readdirSync(notificationDir)
                         .filter(file => file.startsWith('notification_') && file.endsWith('.json'));
          
          for (const file of files) {
            const filePath = path.join(notificationDir, file);
            const notification = JSON.parse(fs.readFileSync(filePath, 'utf8'));
            
            // Crea un'issue
            const changes = notification.changes;
            const changesList = changes.map(change => 
              `- **${change.nome}** (${change.numero_repertorio}): "${change.campo}" Ã¨ cambiato da "${change.valore_precedente}" a "${change.valore_nuovo}"`
            ).join('\n');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Modifiche RUNTS rilevate il ${new Date().toISOString().split('T')[0]}`,
              body: `Sono state rilevate le seguenti modifiche:\n\n${changesList}`
            });
            
            // Elimina il file di notifica dopo averlo elaborato
            fs.unlinkSync(filePath);
          }

    - name: Commit and push updated history
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add data/history.json || true
        git commit -m "Aggiorna storico dati [skip ci]" || true
        git push

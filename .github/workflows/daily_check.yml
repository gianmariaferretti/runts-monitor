name: Daily RUNTS Document Monitoring
on:
  schedule:
    - cron: '0 8 * * *'  # Esegui ogni giorno alle 8:00 UTC
  workflow_dispatch:  # Consente l'esecuzione manuale
jobs:
  check-runts-documents:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Install Playwright browsers
      run: python -m playwright install chromium
    - name: Run monitoring script
      run: python runts_monitor.py
    - name: Check for notifications
      id: check_notifications
      run: |
        if [ -z "$(ls -A data/notification_*.json 2>/dev/null)" ]; then
          echo "No notifications found"
          echo "has_notifications=false" >> $GITHUB_OUTPUT
        else
          echo "Notifications found"
          echo "has_notifications=true" >> $GITHUB_OUTPUT
        fi
    - name: Create GitHub Issue for new documents
      if: steps.check_notifications.outputs.has_notifications == 'true'
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Trova i file di notifica
          const notificationDir = path.join(process.env.GITHUB_WORKSPACE, 'data');
          const files = fs.readdirSync(notificationDir)
                         .filter(file => file.startsWith('notification_') && file.endsWith('.json'));
          
          for (const file of files) {
            const filePath = path.join(notificationDir, file);
            const notification = JSON.parse(fs.readFileSync(filePath, 'utf8'));
            const changes = notification.changes;
            
            // Separa i documenti per categoria
            const bilanci2024 = changes.filter(change => change.campo === "Nuovo bilancio 2024 pubblicato");
            const altriBilanci = changes.filter(change => change.campo !== "Nuovo bilancio 2024 pubblicato" && change.campo.includes("Nuovo bilancio"));
            const altriDocs = changes.filter(change => !change.campo.includes("Nuovo bilancio"));
            
            let body = '';
            
            if (bilanci2024.length > 0) {
              body += "## ðŸš¨ BILANCI 2024 PUBBLICATI\n\n";
              bilanci2024.forEach(change => {
                body += `- **${change.nome}** (${change.codice_fiscale}): ${change.valore_nuovo}\n`;
              });
              body += "\n";
            }
            
            if (altriBilanci.length > 0) {
              body += "## ðŸ“Š ALTRI BILANCI\n\n";
              altriBilanci.forEach(change => {
                body += `- **${change.nome}** (${change.codice_fiscale}): ${change.valore_nuovo}\n`;
              });
              body += "\n";
            }
            
            if (altriDocs.length > 0) {
              body += "## ðŸ“„ ALTRI DOCUMENTI\n\n";
              altriDocs.forEach(change => {
                body += `- **${change.nome}** (${change.codice_fiscale}): ${change.valore_nuovo}\n`;
              });
            }
            
            // Personalizza il titolo dell'issue in base alla presenza di bilanci 2024
            let title = "";
            if (bilanci2024.length > 0) {
              title = `ðŸš¨ URGENTE: ${bilanci2024.length} bilanci 2024 pubblicati (${new Date().toISOString().split('T')[0]})`;
            } else {
              title = `Nuovi documenti RUNTS ${new Date().toISOString().split('T')[0]}`;
            }
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body
            });
            
            // Elimina il file di notifica dopo averlo elaborato
            fs.unlinkSync(filePath);
          }
    - name: Commit and push updated history
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add data/documents_history.json || true
        git commit -m "Aggiorna storico documenti [skip ci]" || true
        git push
